--- START OF FILE lib/src/widgets/components/project_color_picker.dart ---
// lib/src/widgets/components/project_color_picker.dart
import 'package:arcane/src/theme/app_theme.dart';
import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

class ProjectColorPicker extends StatelessWidget {
final String selectedColorHex;
final ValueChanged<String> onColorSelected;

const ProjectColorPicker({
super.key,
required this.selectedColorHex,
required this.onColorSelected,
});

static final List<Color> _availableColors = [
AppTheme.fortniteBlue,
AppTheme.fortnitePurple,
AppTheme.fnAccentGreen,
AppTheme.fnAccentOrange,
AppTheme.fnAccentRed,
const Color(0xFF58D68D), // health
const Color(0xFFF1C40F), // finance
const Color(0xFFEC7063), // creative
const Color(0xFF5DADE2), // exploration
const Color(0xFFE59866), // social
const Color(0xFF2ECC71), // nature
const Color(0xFFF1948A), // Light Red
const Color(0xFF85C1E9), // Light Blue
const Color(0xFFD7BDE2), // Light Purple
const Color(0xFFFAD7A0), // Light Orange
];

String _colorToHex(Color color) {
return color.value.toRadixString(16).padLeft(8, '0').substring(2).toUpperCase();
}

@override
Widget build(BuildContext context) {
return Wrap(
spacing: 8.0,
runSpacing: 8.0,
children: _availableColors.map((color) {
final colorHex = _colorToHex(color);
final isSelectedColor = selectedColorHex == colorHex;
return GestureDetector(
onTap: () => onColorSelected(colorHex),
child: Container(
width: 32,
height: 32,
decoration: BoxDecoration(
color: color,
borderRadius: BorderRadius.circular(8),
border: isSelectedColor
? Border.all(color: Colors.white, width: 2.5)
: Border.all(color: Colors.white.withAlpha(77), width: 1),
boxShadow: isSelectedColor
? [
BoxShadow(
color: Colors.white.withOpacity(0.5),
blurRadius: 4,
spreadRadius: 1,
)
]
: [],
),
child: isSelectedColor
? Icon(
MdiIcons.check,
color: ThemeData.estimateBrightnessForColor(color) == Brightness.dark
? Colors.white
: Colors.black,
size: 18,
)
: null,
),
);
}).toList(),
);
}
}
--- END OF FILE lib/src/widgets/components/project_color_picker.dart ---
--- START OF FILE lib/src/widgets/components/xp_history_graph.dart ---
// lib/src/widgets/components/xp_history_graph.dart
import 'package:arcane/src/providers/game_provider.dart';
import 'package:arcane/src/theme/app_theme.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';

class XpHistoryGraph extends StatelessWidget {
final String selectedSkillId;
final Color skillColor;

const XpHistoryGraph({
super.key,
required this.selectedSkillId,
required this.skillColor,
});

List<FlSpot> _getChartData(GameProvider gameProvider) {
List<Map<String, dynamic>> xpEvents = [];
final now = DateTime.now();
final twentyFourHoursAgo = now.subtract(const Duration(hours: 24));

final todayStr = DateFormat('yyyy-MM-dd').format(now);
final yesterdayStr = DateFormat('yyyy-MM-dd').format(now.subtract(const Duration(days: 1)));

final relevantDates = [todayStr, yesterdayStr];

for (var dateStr in relevantDates) {
  final dayData = gameProvider.completedByDay[dateStr];
  if (dayData != null) {
    final checkpoints = dayData['checkpointsCompleted'] as List<dynamic>? ?? [];
    for (var cpLog in checkpoints) {
      final logMap = cpLog as Map<String, dynamic>;
      final timestamp = DateTime.tryParse(logMap['completionTimestamp'] as String? ?? '');
      if (timestamp != null && timestamp.isAfter(twentyFourHoursAgo)) {
        final double xpForSkill = (logMap['skillXp'] as Map<String, dynamic>?)?[selectedSkillId]?.toDouble() ?? 0.0;
        if (xpForSkill > 0) {
          xpEvents.add({'timestamp': timestamp, 'xp': xpForSkill});
        }
      }
    }
  }
}

if (xpEvents.isEmpty) {
  return [];
}

xpEvents.sort((a, b) => (a['timestamp'] as DateTime).compareTo(b['timestamp'] as DateTime));

List<FlSpot> spots = [];
double cumulativeXp = 0;
for (var event in xpEvents) {
  cumulativeXp += (event['xp'] as double);
  double hoursAgo = now.difference(event['timestamp'] as DateTime).inMinutes / 60.0;
  spots.add(FlSpot(24 - hoursAgo, cumulativeXp));
}

return spots;


}

@override
Widget build(BuildContext context) {
final gameProvider = context.watch<GameProvider>();
final List<FlSpot> spots = _getChartData(gameProvider);
final theme = Theme.of(context);

if (spots.isEmpty) {
  return Container(
    height: 150,
    padding: const EdgeInsets.all(16),
    child: Center(
      child: Text(
        'No XP gained for this skill in the last 24 hours. Complete checkpoints to see progress!',
        textAlign: TextAlign.center,
        style: theme.textTheme.bodyMedium?.copyWith(color: AppTheme.fnTextSecondary, fontStyle: FontStyle.italic),
      ),
    ),
  );
}

double maxY = spots.map((spot) => spot.y).reduce((a, b) => a > b ? a : b);
maxY = (maxY * 1.2).ceilToDouble();
if (maxY < 10) {
  maxY = 10;
}

return SizedBox(
  height: 150,
  child: LineChart(
    LineChartData(
      minX: 0,
      maxX: 24,
      minY: 0,
      maxY: maxY,
      gridData: FlGridData(
        show: true,
        drawVerticalLine: true,
        horizontalInterval: (maxY / 4).clamp(1, 1000),
        verticalInterval: 6,
        getDrawingHorizontalLine: (value) => FlLine(color: AppTheme.fnBorderColor.withAlpha((255 * 0.1).round()), strokeWidth: 0.8),
        getDrawingVerticalLine: (value) => FlLine(color: AppTheme.fnBorderColor.withAlpha((255 * 0.1).round()), strokeWidth: 0.8),
      ),
      titlesData: FlTitlesData(
        leftTitles: AxisTitles(
          sideTitles: SideTitles(
            showTitles: true,
            interval: (maxY / 4).clamp(1, 1000),
            reservedSize: 30,
            getTitlesWidget: (value, meta) {
              return Text(value.toInt().toString(), style: const TextStyle(color: AppTheme.fnTextSecondary, fontSize: 10));
            },
          ),
        ),
        bottomTitles: AxisTitles(
          sideTitles: SideTitles(
            showTitles: true,
            reservedSize: 30,
            interval: 6,
            getTitlesWidget: (value, meta) {
              String text;
              if (value == 0) {
                text = '24h ago';
              } else if (value == 24) {
                text = 'Now';
              } else {
                text = '${(24 - value).toInt()}h ago';
              }
              return Padding(
                padding: const EdgeInsets.only(top: 8.0),
                child: Text(text, style: const TextStyle(color: AppTheme.fnTextSecondary, fontSize: 10, fontWeight: FontWeight.bold)),
              );
            },
          ),
        ),
        topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
        rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
      ),
      borderData: FlBorderData(show: true, border: Border.all(color: AppTheme.fnBorderColor.withAlpha((255 * 0.2).round()))),
      lineBarsData: [
        LineChartBarData(
          spots: spots,
          isCurved: true,
          curveSmoothness: 0.35,
          color: skillColor,
          barWidth: 3,
          isStrokeCapRound: true,
          dotData: const FlDotData(show: false),
          belowBarData: BarAreaData(show: true, color: skillColor.withAlpha((255 * 0.2).round())),
        ),
      ],
      lineTouchData: LineTouchData(
        touchTooltipData: LineTouchTooltipData(
          getTooltipColor: (touchedSpot) => AppTheme.fnBgMedium,
          getTooltipItems: (List<LineBarSpot> touchedSpots) {
             return touchedSpots.map((spot) {
              return LineTooltipItem(
                '+${spot.y.toStringAsFixed(1)} XP',
                TextStyle(color: skillColor, fontWeight: FontWeight.bold),
              );
            }).toList();
          }
        )
      )
    ),
  ),
);
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

}
}
--- END OF FILE lib/src/widgets/components/xp_history_graph.dart ---
--- START OF FILE lib/src/widgets/dialogs/project_edit_dialog.dart ---
// lib/src/widgets/dialogs/project_edit_dialog.dart
import 'package:arcane/src/models/game_models.dart';
import 'package:arcane/src/providers/game_provider.dart';
import 'package:arcane/src/theme/app_theme.dart';
import 'package:arcane/src/widgets/components/project_color_picker.dart';
import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:provider/provider.dart';

class ProjectEditDialog extends StatefulWidget {
final Project? project;

const ProjectEditDialog({super.key, this.project});

bool get isEditMode => project != null;

@override
State<ProjectEditDialog> createState() => _ProjectEditDialogState();
}

class _ProjectEditDialogState extends State<ProjectEditDialog> {
final _formKey = GlobalKey<FormState>();
late TextEditingController _nameController;
late TextEditingController _descController;
late TextEditingController _themeController;
late String _selectedColorHex;

@override
void initState() {
super.initState();
_nameController = TextEditingController(text: widget.project?.name ?? '');
_descController = TextEditingController(text: widget.project?.description ?? '');
_themeController = TextEditingController(text: widget.project?.theme ?? '');
_selectedColorHex = widget.project?.colorHex ?? '00BFFF'; // Default to fortnite blue
}

@override
void dispose() {
_nameController.dispose();
_descController.dispose();
_themeController.dispose();
super.dispose();
}

void _handleSaveChanges() {
if (!_formKey.currentState!.validate()) {
return;
}

final gameProvider = Provider.of<GameProvider>(context, listen: false);
final themeText = _themeController.text.trim().toLowerCase().replaceAll(' ', '_');

if (widget.isEditMode) {
  gameProvider.editProject(
    widget.project!.id,
    name: _nameController.text,
    description: _descController.text,
    theme: themeText,
    colorHex: _selectedColorHex,
  );
} else {
  gameProvider.addProject(
    name: _nameController.text,
    description: _descController.text,
    theme: themeText.isNotEmpty ? themeText : 'general', // Default to general if empty
    colorHex: _selectedColorHex,
  );
}
Navigator.of(context).pop();
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

}

void _handleDelete() {
final gameProvider = Provider.of<GameProvider>(context, listen: false);
showDialog(
context: context,
builder: (ctx) => AlertDialog(
title: Text('Delete Project?', style: TextStyle(color: AppTheme.fnAccentRed)),
content: Text('Are you sure you want to delete "${widget.project!.name}"? This action cannot be undone.'),
actions: [
TextButton(onPressed: () => Navigator.of(ctx).pop(), child: const Text('Cancel')),
ElevatedButton(
onPressed: () {
gameProvider.deleteProject(widget.project!.id);
Navigator.of(ctx).pop(); // Close confirmation dialog
Navigator.of(context).pop(); // Close edit dialog
},
style: ElevatedButton.styleFrom(backgroundColor: AppTheme.fnAccentRed),
child: const Text('Delete'),
),
],
),
);
}

@override
Widget build(BuildContext context) {
return AlertDialog(
backgroundColor: AppTheme.fnBgMedium,
title: Text(widget.isEditMode ? 'Edit Project' : 'Add New Project'),
content: Form(
key: _formKey,
child: SingleChildScrollView(
child: Column(
mainAxisSize: MainAxisSize.min,
crossAxisAlignment: CrossAxisAlignment.start,
children: [
TextFormField(
controller: _nameController,
decoration: const InputDecoration(labelText: 'Project Name'),
validator: (value) => value!.trim().isEmpty ? 'Project name cannot be empty.' : null,
),
const SizedBox(height: 16),
TextFormField(
controller: _descController,
decoration: const InputDecoration(labelText: 'Description'),
maxLines: 2,
),
const SizedBox(height: 16),
TextFormField(
controller: _themeController,
decoration: const InputDecoration(
labelText: 'Theme / Skill Name',
hintText: 'e.g., fitness, programming, learning_spanish'
),
validator: (value) => value!.trim().isEmpty ? 'Theme cannot be empty.' : null,
),
const SizedBox(height: 24),
Text("Select Project Color:", style: Theme.of(context).textTheme.labelMedium),
const SizedBox(height: 12),
ProjectColorPicker(
selectedColorHex: _selectedColorHex,
onColorSelected: (newColorHex) {
setState(() {
_selectedColorHex = newColorHex;
});
},
),
],
),
),
),
actionsAlignment: MainAxisAlignment.spaceBetween,
actions: <Widget>[
if (widget.isEditMode)
IconButton(
icon: Icon(MdiIcons.deleteForeverOutline, color: AppTheme.fnAccentRed),
onPressed: _handleDelete,
tooltip: 'Delete Project',
),
Row(
mainAxisSize: MainAxisSize.min,
children: [
TextButton(child: const Text('Cancel'), onPressed: () => Navigator.of(context).pop()),
const SizedBox(width: 8),
ElevatedButton(
child: Text(widget.isEditMode ? 'Save Changes' : 'Add Project'),
onPressed: _handleSaveChanges,
),
],
),
],
);
}
}
--- END OF FILE lib/src/widgets/dialogs/project_edit_dialog.dart ---
--- START OF FILE lib/src/widgets/views/daily_summary_widgets/emotion_trend_chart.dart ---
// lib/src/widgets/views/daily_summary_widgets/emotion_trend_chart.dart
import 'package:arcane/src/models/game_models.dart';
import 'package:arcane/src/theme/app_theme.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class EmotionTrendChart extends StatelessWidget {
final List<EmotionLog> logs;
final ThemeData theme;
final Color dynamicAccent;

const EmotionTrendChart({
super.key,
required this.logs,
required this.theme,
required this.dynamicAccent,
});

String _getEmotionLabel(int primaryRatingCategory) {
if (primaryRatingCategory >= 5) return "Great";
switch (primaryRatingCategory) {
case 1: return "Awful";
case 2: return "Bad";
case 3: return "Okay";
case 4: return "Good";
default: return "Okay";
}
}

@override
Widget build(BuildContext context) {
if (logs.length < 2) {
return SizedBox(
height: 200,
child: Center(child: Text("Need at least 2 logs for a trend line.", textAlign: TextAlign.center, style: theme.textTheme.bodyMedium?.copyWith(color: AppTheme.fnTextSecondary, fontStyle: FontStyle.italic))),
);
}
List<FlSpot> spots = logs.map((log) {
final DateTime logDayMidnight = DateTime(log.timestamp.year, log.timestamp.month, log.timestamp.day);
double xValue = log.timestamp.toLocal().difference(logDayMidnight).inMinutes / 60.0;
return FlSpot(xValue, log.rating.toDouble());
}).toList();

double dataMinX = spots.map((s) => s.x).reduce((a, b) => a < b ? a : b);
double dataMaxX = spots.map((s) => s.x).reduce((a, b) => a > b ? a : b);
double minX, maxX;

if (dataMaxX == dataMinX) {
  minX = (dataMinX - 1.0).clamp(0.0, 23.0);
  maxX = (dataMaxX + 1.0).clamp(minX + 0.1, 23.99);
} else {
  double range = dataMaxX - dataMinX;
  minX = (dataMinX - range * 0.05).clamp(0.0, 23.49);
  maxX = (dataMaxX + range * 0.05).clamp(minX + 0.1, 23.99);
}

if (maxX - minX < 0.2) {
  double midDataX = (dataMinX + dataMaxX) / 2.0;
  minX = (midDataX - 0.5).clamp(0.0, 23.0);
  maxX = (midDataX + 0.5).clamp(minX + 0.1, 23.99);
  if (maxX <= minX) { minX = 0.0; maxX = 23.99; }
}

return SizedBox(
  height: 200,
  child: LineChart(
    LineChartData(
      minX: minX, maxX: maxX, minY: 0.5, maxY: 6.5,
      gridData: FlGridData(
        show: true, drawVerticalLine: true,
        horizontalInterval: 1, verticalInterval: ((maxX - minX) / 5).clamp(0.2, 6.0),
        getDrawingHorizontalLine: (value) => FlLine(color: AppTheme.fnBorderColor.withAlpha((255 * 0.1).round()), strokeWidth: 0.8),
        getDrawingVerticalLine: (value) => FlLine(color: AppTheme.fnBorderColor.withAlpha((255 * 0.1).round()), strokeWidth: 0.8),
      ),
      titlesData: FlTitlesData(
        leftTitles: AxisTitles(sideTitles: SideTitles(
            showTitles: true, interval: 1, reservedSize: 30,
            getTitlesWidget: (value, meta) {
              if (value >= 1 && value <= 6 && value == value.truncateToDouble()) return Text(value.toInt().toString(), style: const TextStyle(color: AppTheme.fnTextSecondary, fontSize: 10));
              return const Text('');
            },
        )),
        bottomTitles: AxisTitles(sideTitles: SideTitles(
            showTitles: true, reservedSize: 30, interval: ((maxX - minX) / 4).ceilToDouble().clamp(0.5, 6.0),
            getTitlesWidget: (value, meta) {
              final hour = value.truncate().clamp(0, 23);
              final minute = ((value - hour) * 60).round().clamp(0, 59);
              return Padding(padding: const EdgeInsets.only(top: 8.0), child: Text(DateFormat('HH:mm').format(DateTime(2000, 1, 1, hour, minute)), style: const TextStyle(color: AppTheme.fnTextSecondary, fontSize: 10, fontWeight: FontWeight.bold)));
            },
        )),
        topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
        rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
      ),
      borderData: FlBorderData(show: true, border: Border.all(color: AppTheme.fnBorderColor.withAlpha((255 * 0.2).round()))),
      lineBarsData: [
        LineChartBarData(
          spots: spots,
          isCurved: true,
          curveSmoothness: 0.35,
          color: dynamicAccent,
          barWidth: 3,
          isStrokeCapRound: true,
          dotData: FlDotData(show: true, getDotPainter: (spot, percent, barData, index) => FlDotCirclePainter(radius: 4, color: dynamicAccent.withAlpha((255 * 0.8).round()), strokeWidth: 1.5, strokeColor: AppTheme.fnBgMedium)),
          belowBarData: BarAreaData(show: true, color: dynamicAccent.withAlpha((255 * 0.1).round())),
        ),
      ],
      lineTouchData: LineTouchData(
        touchTooltipData: LineTouchTooltipData(
          getTooltipColor: (touchedSpot) => AppTheme.fnBgMedium,
          getTooltipItems: (List<LineBarSpot> touchedSpots) {
            return touchedSpots.map((spot) {
                  final logEntry = logs[spot.spotIndex];
                  return LineTooltipItem('${_getEmotionLabel(spot.y.truncate())} (${spot.y.toStringAsFixed(2)}) at ${DateFormat('HH:mm').format(logEntry.timestamp.toLocal())}', TextStyle(color: dynamicAccent, fontWeight: FontWeight.bold, fontFamily: AppTheme.fontDisplay));
                }).toList();
          },
        ),
      ),
    ),
  ),
);
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

}
}
--- END OF FILE lib/src/widgets/views/daily_summary_widgets/emotion_trend_chart.dart ---